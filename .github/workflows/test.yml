# 출처: https://wbluke.tistory.com/39 [함께 자라기]
# 각 스크립트에서 사용하는 파일의 위치, 경로 등은 프로젝트의 상황에 따라 알맞게 수정하셔야 합니다.
# 예를 들어 멀티모듈 프로젝트의 경우, 해당 workflow 의 위치나 각 모듈의 최상단 위치를 고려하여 스크립트를 작성하셔야 합니다.

# workflow의 이름을 지정한다.
name: test-system 

# Controls when the action will run. 
#on:
  # Triggers the workflow on push or pull request events but only for the master branch
  #push:
    #branches: [ master ]
  #pull_request:
    #branches: [ master ]
    
# 이 workflow 가 언제 실행될건지 트리거를 지정할 수 있습니다. 특정 브랜치가 push 되는 경우, Pull Request 가 생성될 경우, 또는 crontab 문법으로 스케줄링을 걸 수도 있습니다.
# workflow_dispatch 는 수동으로 해당 workflow 를 실행시키겠다는 의미입니다.
# push 등의 이벤트에 의해 자동으로 배포가 되기 보다는 사람이 수동으로 빌드/배포를 실행하는 것이 안전하다고 생각합니다.
on: 
  workflow_dispatch:

# 현재 스크립트에서 사용할 환경변수를 정의하여 사용할 수 있습니다.
# 여러 곳에서 공통으로 사용되는 문자열이나, 명확하게 의미를 부여해야 하는 키워드에 사용하시면 됩니다.
env:
  S3_BUCKET_NAME: lynn-test-deploy
  PROJECT_NAME: github-action-test

# job, steps -> workflow 는 하나 혹은 그 이상의 job 을 가질 수 있고 각 job 은 여러 step 에 따라 단계를 나눌 수 있습니다.
jobs:
  build:
    # runs-on -> 해당 workflow 를 어떤 OS 환경에서 실행할 것인지 지정할 수 있습니다.
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        # actions/행위 이름 -> actions/행위 이름 을 사용하는 step 은 앞서 보았던 marketplace 에서 미리 정의되어 있는 행위를 가져와서 사용한 것입니다.
        # checkout 은 깃헙이 제공하는 워크스페이스 (이 workflow 를 실행하는 공간) 에서 내 저장소가 위치한 곳으로 이동한다고 생각하시면 됩니다.
        uses: actions/checkout@v2
      
      # 이후에는 java 를 셋업하고 gradlew 에 실행권한을 준 뒤 프로젝트를 build 하는 과정입니다.
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
        
      - name: Grant excute permissiont ofr gradlew
        run: chmod +x gradlew
        shell: bash
        
      - name: Build with gradle
        run: ./gradlew build
        shell: bash

      - name: Make build to zip file
        # $GITHUB_SHA -> Github Actions 에서 제공하는 여러 기본 환경변수 중 하나입니다. 현재 workflow 를 실행시키는 커밋의 해쉬값입니다.
        # 다른 기본 환경변수들도 필요에 따라 사용할 수 있습니다.
        # https://docs.github.com/en/free-pro-team@latest/actions/reference/environment-variables#default-environment-variables
        run: zip -r ./$GITHUB_SHA.zip .
        shell: bash

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          # ${{ secrets.KEY_이름 }} -> 위의 환경변수와는 비슷하면서도 조금 다른 Context 입니다.
          # Github Actions 에서 ${{ }} 문법으로 여러 함수나 표현식, 값들을 등록하고 가져와서 사용할 수 있습니다.
          # 자세한 내용은 Contexts and Expressions - 레퍼런스를 참조해 보세요.
          # https://docs.github.com/en/free-pro-team@latest/actions/reference/context-and-expression-syntax-for-github-actions#contexts
          # secrets 는 저장소에 등록한 비밀 키값을 가져오는 키워드인데요, 아래에서 설명하겠습니다.
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Upload to S3
        # aws s3 cp -> aws cli 명령어 중 하나입니다. copy 명령어로 현재 위치의 파일을 S3로 업로드하거나, 반대로 S3의 파일을 현재 위치로 다운로드할 수 있습니다.
        # https://docs.aws.amazon.com/ko_kr/cli/latest/userguide/cli-services-s3-commands.html#using-s3-commands-managing-objects
        run: aws s3 cp --region ap-northeast-2 ./$GITHUB_SHA.zip s3://$S3_BUCKET_NAME/$PROJECT_NAME/$GITHUB_SHA.zip
