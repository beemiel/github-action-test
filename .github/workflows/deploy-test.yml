name: github-action-test

on:
  push:
    branches:
      - master # (1) 실습하시는분들은 master로 하시면 됩니다. (저는 별도 브랜치로 지정)
  workflow_dispatch: # (2) 수동 실행

env:
  S3_BUCKET_NAME: lynn-test-deploy
  PROJECT_NAME: github-action-test-another

jobs:
  build:
    runs-on: ubuntu-18.04 # (3)

    steps:
      - name: Checkout
        uses: actions/checkout@v2 # (4)

      - name: Set up JDK 1.8
        uses: actions/setup-java@v1 # (5)
        with:
          java-version: 1.8

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew # (6)
        shell: bash

      - name: Build with Gradle
        run: ./gradlew clean build # (7)
        shell: bash

      - name: Make build to zip file
        # $GITHUB_SHA -> Github Actions 에서 제공하는 여러 기본 환경변수 중 하나입니다. 현재 workflow 를 실행시키는 커밋의 해쉬값입니다.
        # 다른 기본 환경변수들도 필요에 따라 사용할 수 있습니다.
        # https://docs.github.com/en/free-pro-team@latest/actions/reference/environment-variables#default-environment-variables
        run: zip -r ./$GITHUB_SHA.zip .
        shell: bash

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          # ${{ secrets.KEY_이름 }} -> 위의 환경변수와는 비슷하면서도 조금 다른 Context 입니다.
          # Github Actions 에서 ${{ }} 문법으로 여러 함수나 표현식, 값들을 등록하고 가져와서 사용할 수 있습니다.
          # 자세한 내용은 Contexts and Expressions - 레퍼런스를 참조해 보세요.
          # https://docs.github.com/en/free-pro-team@latest/actions/reference/context-and-expression-syntax-for-github-actions#contexts
          # secrets 는 저장소에 등록한 비밀 키값을 가져오는 키워드인데요, 아래에서 설명하겠습니다.
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Upload to S3
        # aws s3 cp -> aws cli 명령어 중 하나입니다. copy 명령어로 현재 위치의 파일을 S3로 업로드하거나, 반대로 S3의 파일을 현재 위치로 다운로드할 수 있습니다.
        # https://docs.aws.amazon.com/ko_kr/cli/latest/userguide/cli-services-s3-commands.html#using-s3-commands-managing-objects
        run: aws s3 cp --region ap-northeast-2 ./$GITHUB_SHA.zip s3://$S3_BUCKET_NAME/$PROJECT_NAME/$GITHUB_SHA.zip
        
      - name: Code Deploy
        # application-name -> CodeDeploy 애플리케이션의 이름을 지정합니다.
        # deployment-config-name -> 배포 그룹 설정에서 선택했던 배포 방식을 지정합니다.
        # deployment-group-name -> 배포 그룹의 이름입니다.
        # s3-location -> jar를 S3에서 가지고 오기 위해 차례로 bucket 이름, 파일 타입, 파일 경로를 입력합니다.
        run: aws deploy create-deployment --application-name test-deploy --deployment-config-name CodeDeployDefault.AllAtOnce --deployment-group-name develop --s3-location bucket=$S3_BUCKET_NAME,bundleType=zip,key=$PROJECT_NAME/$GITHUB_SHA.zip
